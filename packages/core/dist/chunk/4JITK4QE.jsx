import{g as P}from"./N4EPFE3E.jsx";import{k as R}from"./ZSYY5OQU.jsx";import{a as M}from"./LD6VFCOU.jsx";import{a as H}from"./XWCF3RNR.jsx";var K={};H(K,{Fill:()=>x,Label:()=>f,Progress:()=>J,Root:()=>y,Track:()=>L,ValueLabel:()=>C,useProgressContext:()=>m});import{splitProps as v}from"solid-js";import{combineStyle as I}from"@solid-primitives/props";import{createContext as D,useContext as S}from"solid-js";var u=D();function m(){let r=S(u);if(r===void 0)throw new Error("[kobalte]: `useProgressContext` must be used within a `Progress.Root` component");return r}function x(r){let o=m(),[i,e]=v(r,["style"]);return<P.Fill style={I({"--kb-progress-fill-width":o.progressFillWidth()},i.style)}{...o.dataset()}{...e}/>}import{mergeDefaultProps as A}from"@kobalte/utils";import{createEffect as w,onCleanup as W,splitProps as j}from"solid-js";function f(r){let o=m(),i=A({id:o.generateId("label")},r),[e,d]=j(i,["id"]);return w(()=>W(o.registerLabelId(e.id))),<P.Label id={e.id}{...o.dataset()}{...d}/>}import{clamp as $,createGenerateId as q,mergeDefaultProps as G}from"@kobalte/utils";import{createMemo as N,createSignal as U,createUniqueId as z,splitProps as B}from"solid-js";function y(r){let o=`progress-${z()}`,i=G({id:o,value:0,minValue:0,maxValue:100},r),[e,d]=B(i,["value","minValue","maxValue","indeterminate","getValueLabel"]),[V,O]=U(),k=R(()=>({style:"percent"})),c=()=>$(e.value,e.minValue,e.maxValue),g=()=>(c()-e.minValue)/(e.maxValue-e.minValue),F=()=>{if(!e.indeterminate)return e.getValueLabel?e.getValueLabel({value:c(),min:e.minValue,max:e.maxValue}):k().format(g())},E=()=>e.indeterminate?void 0:`${Math.round(g()*100)}%`,T=N(()=>{let b;return e.indeterminate||(b=g()===1?"complete":"loading"),{"data-progress":b,"data-indeterminate":e.indeterminate?"":void 0}}),h={dataset:T,value:c,valuePercent:g,valueLabel:F,labelId:V,progressFillWidth:E,generateId:q(()=>d.id),registerLabelId:M(O)};return<u.Provider value={h}><P role="progressbar"indeterminate={e.indeterminate||!1}{...T()}{...i}/></u.Provider>}function L(r){let o=m();return<P.Track{...o.dataset()}{...r}/>}function C(r){let o=m();return<P.ValueLabel{...o.dataset()}{...r}/>}var J=Object.assign(y,{Fill:x,Label:f,Track:L,ValueLabel:C});export{m as a,x as b,f as c,y as d,L as e,C as f,J as g,K as h};
