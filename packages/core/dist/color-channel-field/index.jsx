import{b as O}from"../chunk/WZF3RE4B.jsx";import{b as R,c as b,d as y,e as T,f as I}from"../chunk/BXAIFZRD.jsx";import"../chunk/UBMIWLLX.jsx";import"../chunk/YU3BENDD.jsx";import{a as P}from"../chunk/MYEAQNC4.jsx";import"../chunk/RQL65DCQ.jsx";import{a as F}from"../chunk/27VXZQWW.jsx";import{e as C}from"../chunk/HIUHMFLS.jsx";import"../chunk/ZSYY5OQU.jsx";import"../chunk/24EX2HEU.jsx";import"../chunk/LD6VFCOU.jsx";import{a as p}from"../chunk/A5YUKSV6.jsx";import"../chunk/3BC6LDRX.jsx";import"../chunk/DOLTULMA.jsx";import"../chunk/HAEWETXL.jsx";import"../chunk/XWCF3RNR.jsx";import{mergeDefaultProps as L}from"@kobalte/utils";import{createMemo as t,createUniqueId as v,splitProps as H}from"solid-js";function N(f){let D=`colorchannelfield-${v()}`,V=L({id:D},f),[e,M]=H(V,["value","defaultValue","onChange","channel","colorSpace"]),[a,E]=p({value:()=>e.value,defaultValue:()=>e.defaultValue??O("hsl(0, 100%, 50%)"),onChange:l=>e.onChange?.(l)}),r=t(()=>e.colorSpace?a().toFormat(e.colorSpace):a()),o=t(()=>r().getChannelRange(e.channel)),i=t(()=>r().getChannelFormatOptions(e.channel)),n=t(()=>i().style==="percent"&&o().maxValue===100?100:1),x=l=>{E(r().withChannelValue(e.channel,Number.isNaN(l)?Number.NaN:Math.round(Math.max(Math.min(l*n(),o().maxValue),o().minValue))))};return<I rawValue={Number.isNaN(r().getChannelValue(e.channel))?void 0:r().getChannelValue(e.channel)/n()}minValue={o().minValue/n()}maxValue={o().maxValue/n()}step={o().step/n()}formatOptions={i()}onRawValueChange={x}{...M}/>}var B=Object.assign(N,{Description:C,ErrorMessage:F,HiddenInput:b,Input:T,IncrementTrigger:y,DecrementTrigger:R,Label:P});export{B as ColorChannelField,R as DecrementTrigger,C as Description,F as ErrorMessage,b as HiddenInput,y as IncrementTrigger,T as Input,P as Label,N as Root};
