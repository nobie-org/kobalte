{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":";AAQA,OAAO,YAAY;AAEnB,IAAM,SAAS;AAAA,EACd;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACD;AACA,IAAM,eAAe,CAAC,cAAc,UAAU;AAC9C,IAAM,eAAe,CAAC,SAAS,QAAQ,UAAU,KAAK;AACtD,IAAM,mBAAmB,CAAC,MAAM,QAAQ,QAAQ,OAAO;AAOvD,IAAO,cAAQ,OAAO;AAAA,EACrB,CAAC,EAAE,SAAS,KAAK,IAAI,CAAC,MAAM;AAC3B,WAAO,CAAC,EAAE,WAAW,MAAM;AAC1B,iBAAW,SAAS,QAAQ;AAC3B,mBAAW,GAAG,MAAM,IAAI,KAAK,IAAI,CAAC,UAAU,KAAK,GAAG,CAAC;AACrD,mBAAW,GAAG,MAAM,QAAQ,KAAK,IAAI,CAAC,eAAe,KAAK,IAAI,CAAC;AAC/D;AAAA,UACC,GAAG,MAAM,UAAU,KAAK;AAAA,UACxB,uBAAuB,KAAK;AAAA,QAC7B;AACA;AAAA,UACC,GAAG,MAAM,SAAS,KAAK;AAAA,UACvB,sBAAsB,KAAK;AAAA,QAC5B;AAAA,MACD;AAEA,iBAAW,eAAe,cAAc;AACvC,mBAAW,GAAG,MAAM,IAAI,WAAW,IAAI;AAAA,UACtC,uBAAuB,WAAW;AAAA,QACnC,CAAC;AACD,mBAAW,GAAG,MAAM,QAAQ,WAAW,IAAI;AAAA,UAC1C,4BAA4B,WAAW;AAAA,QACxC,CAAC;AACD;AAAA,UACC,GAAG,MAAM,UAAU,WAAW;AAAA,UAC9B,oCAAoC,WAAW;AAAA,QAChD;AACA;AAAA,UACC,GAAG,MAAM,SAAS,WAAW;AAAA,UAC7B,mCAAmC,WAAW;AAAA,QAC/C;AAAA,MACD;AAEA,iBAAW,SAAS,cAAc;AACjC,mBAAW,GAAG,MAAM,UAAU,KAAK,IAAI,CAAC,iBAAiB,KAAK,IAAI,CAAC;AACnE,mBAAW,GAAG,MAAM,cAAc,KAAK,IAAI;AAAA,UAC1C,sBAAsB,KAAK;AAAA,QAC5B,CAAC;AACD;AAAA,UACC,GAAG,MAAM,gBAAgB,KAAK;AAAA,UAC9B,8BAA8B,KAAK;AAAA,QACpC;AACA;AAAA,UACC,GAAG,MAAM,eAAe,KAAK;AAAA,UAC7B,6BAA6B,KAAK;AAAA,QACnC;AAAA,MACD;AAEA,iBAAW,aAAa,kBAAkB;AACzC,mBAAW,GAAG,MAAM,oBAAoB,SAAS,IAAI;AAAA,UACpD,2BAA2B,SAAS;AAAA,QACrC,CAAC;AACD,mBAAW,GAAG,MAAM,wBAAwB,SAAS,IAAI;AAAA,UACxD,gCAAgC,SAAS;AAAA,QAC1C,CAAC;AACD;AAAA,UACC,GAAG,MAAM,0BAA0B,SAAS;AAAA,UAC5C,wCAAwC,SAAS;AAAA,QAClD;AACA;AAAA,UACC,GAAG,MAAM,yBAAyB,SAAS;AAAA,UAC3C,uCAAuC,SAAS;AAAA,QACjD;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD","sourcesContent":["/*\n * Portions of this file are based on code from headlessui.\n * MIT Licensed, Copyright (c) 2020 Tailwind Labs.\n *\n * Credits to the Tailwind Labs team:\n * https://github.com/tailwindlabs/headlessui/blob/8e1e19f94c28af68c05becc80bf89575e1fa1d36/packages/@headlessui-tailwindcss/src/index.ts\n */\n\nimport plugin from \"tailwindcss/plugin\";\n\nconst STATES = [\n\t\"valid\",\n\t\"invalid\",\n\t\"required\",\n\t\"disabled\",\n\t\"readonly\",\n\t\"checked\",\n\t\"indeterminate\",\n\t\"selected\",\n\t\"pressed\",\n\t\"expanded\",\n\t\"opened\",\n\t\"closed\",\n\t\"highlighted\",\n\t\"current\",\n\t\"placeholder-shown\",\n\t\"visible\",\n\t\"animate\",\n];\nconst ORIENTATIONS = [\"horizontal\", \"vertical\"];\nconst SWIPE_STATES = [\"start\", \"move\", \"cancel\", \"end\"];\nconst SWIPE_DIRECTIONS = [\"up\", \"down\", \"left\", \"right\"];\n\nexport interface KobalteTailwindPluginOptions {\n\t/** The prefix of generated classes. */\n\tprefix?: string;\n}\n\nexport default plugin.withOptions<KobalteTailwindPluginOptions>(\n\t({ prefix = \"ui\" } = {}) => {\n\t\treturn ({ addVariant }) => {\n\t\t\tfor (const state of STATES) {\n\t\t\t\taddVariant(`${prefix}-${state}`, [`&[data-${state}]`]);\n\t\t\t\taddVariant(`${prefix}-not-${state}`, [`&:not([data-${state}])`]);\n\t\t\t\taddVariant(\n\t\t\t\t\t`${prefix}-group-${state}`,\n\t\t\t\t\t`:merge(.group)[data-${state}] &`,\n\t\t\t\t);\n\t\t\t\taddVariant(\n\t\t\t\t\t`${prefix}-peer-${state}`,\n\t\t\t\t\t`:merge(.peer)[data-${state}] ~ &`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tfor (const orientation of ORIENTATIONS) {\n\t\t\t\taddVariant(`${prefix}-${orientation}`, [\n\t\t\t\t\t`&[data-orientation='${orientation}']`,\n\t\t\t\t]);\n\t\t\t\taddVariant(`${prefix}-not-${orientation}`, [\n\t\t\t\t\t`&:not([data-orientation='${orientation}'])`,\n\t\t\t\t]);\n\t\t\t\taddVariant(\n\t\t\t\t\t`${prefix}-group-${orientation}`,\n\t\t\t\t\t`:merge(.group)[data-orientation='${orientation}'] &`,\n\t\t\t\t);\n\t\t\t\taddVariant(\n\t\t\t\t\t`${prefix}-peer-${orientation}`,\n\t\t\t\t\t`:merge(.peer)[data-orientation='${orientation}'] ~ &`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tfor (const state of SWIPE_STATES) {\n\t\t\t\taddVariant(`${prefix}-swipe-${state}`, [`&[data-swipe='${state}']`]);\n\t\t\t\taddVariant(`${prefix}-not-swipe-${state}`, [\n\t\t\t\t\t`&:not([data-swipe='${state}'])`,\n\t\t\t\t]);\n\t\t\t\taddVariant(\n\t\t\t\t\t`${prefix}-group-swipe-${state}`,\n\t\t\t\t\t`:merge(.group)[data-swipe='${state}'] &`,\n\t\t\t\t);\n\t\t\t\taddVariant(\n\t\t\t\t\t`${prefix}-peer-swipe-${state}`,\n\t\t\t\t\t`:merge(.peer)[data-swipe='${state}'] ~ &`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tfor (const direction of SWIPE_DIRECTIONS) {\n\t\t\t\taddVariant(`${prefix}-swipe-direction-${direction}`, [\n\t\t\t\t\t`&[data-swipe-direction='${direction}']`,\n\t\t\t\t]);\n\t\t\t\taddVariant(`${prefix}-not-swipe-direction-${direction}`, [\n\t\t\t\t\t`&:not([data-swipe-direction='${direction}'])`,\n\t\t\t\t]);\n\t\t\t\taddVariant(\n\t\t\t\t\t`${prefix}-group-swipe-direction-${direction}`,\n\t\t\t\t\t`:merge(.group)[data-swipe-direction='${direction}'] &`,\n\t\t\t\t);\n\t\t\t\taddVariant(\n\t\t\t\t\t`${prefix}-peer-swipe-direction-${direction}`,\n\t\t\t\t\t`:merge(.peer)[data-swipe-direction='${direction}'] ~ &`,\n\t\t\t\t);\n\t\t\t}\n\t\t};\n\t},\n);\n"]}